using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Mahzan.Models.Entities;
using Mahzan.Models.Enums.Audit;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace Mahzan.Models
{
    public class MahzanDbContext : DbContext
    {
        public DbSet<Audits> Audits { get; set; }
        public DbSet<Members> Members { get; set; }


        //public DbSet<Empresas> Empresas { get; set; }
        //public DbSet<Empleados> Empleados { get; set; }
        //public DbSet<Empleados_Sucursal> Empleados_Sucursal { get; set; }

        //public DbSet<Miembros> Miembros { get; set; }
        //public DbSet<Sucursales> Sucursales { get; set; }

        public MahzanDbContext(DbContextOptions<MahzanDbContext> options) : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            //optionsBuilder.UseSqlServer(ConnectionString);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Audits>()
                        .HasKey(audits => new { audits.Id });

            modelBuilder.Entity<Members>()
                        .HasKey(members => new { members.Id });

            //modelBuilder.Entity<Groups>()
            //            .HasKey(grupos => new { grupos.Id });

            //modelBuilder.Entity<Empresas>()
            //            .HasKey(empresas => new { empresas.Id });

            //modelBuilder.Entity<Empleados>()
            //            .HasKey(empleados => new { empleados.Id });

            //modelBuilder.Entity<Empleados_Sucursal>()
            //            .HasKey(empleados_sucursal => new {
            //                empleados_sucursal.EmpleadoId,
            //                empleados_sucursal.SucursalId,
            //                empleados_sucursal.MiembroId
            //            });



            //modelBuilder.Entity<Miembros>()
            //            .HasKey(miembros => new { miembros.Id });

            //modelBuilder.Entity<Sucursales>()
            //            .HasKey(sucursales => new { sucursales.Id });
        }

        public int SaveChanges(TableAuditEnum tableAuditEnum,
                               string aspNetUsersId = null)
        {
            var auditEntries = OnBeforeSaveChanges(tableAuditEnum,
                                                   aspNetUsersId);

            var result = base.SaveChanges();

            OnAfterSaveChanges(tableAuditEnum,
                               aspNetUsersId,
                               auditEntries);

            return result;

        }
        private List<AuditEntry> OnBeforeSaveChanges(TableAuditEnum tableAuditEnum,
                                                     string aspNetUsersId)
        {
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Audits || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var auditEntry = new AuditEntry(entry);
                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            auditEntry.Tipo = EntityState.Added;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            auditEntry.Tipo = EntityState.Deleted;
                            break;

                        case EntityState.Modified:

                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }

                            auditEntry.Tipo = EntityState.Modified;
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                switch (tableAuditEnum)
                {
                    case TableAuditEnum.MEMBERS:
                        Audits.Add(auditEntry.ToAudits());
                        break;
                    default:
                        break;
                }

                //Debug.WriteLine(auditEntry.ToAudit());
                //AuditoriaDAO.Agrega(tablaAuditoriaEnum,
                //                    aspNetUsersId,
                //                    auditEntry);
                //Audits.Add(auditEntry.ToAudit());
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }
        private Task OnAfterSaveChanges(TableAuditEnum tableAuditEnum,
                                        string aspNetUserId,
                                        List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry\
                Audits.Add(auditEntry.ToAudits());

            }

            return SaveChangesAsync();
        }
    }
}
