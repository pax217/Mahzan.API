using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Mahzan.Models.Entities;
using Mahzan.Models.Enums.Audit;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace Mahzan.Models
{
    public class MahzanDbContext : DbContext
    {
        public DbSet<Audits> Audits { get; set; }
        public DbSet<Members> Members { get; set; }
        public DbSet<Groups> Groups { get; set; }
        public DbSet<Groups_Audit> Groups_Audit { get; set; }
        public DbSet<Companies> Companies { get; set; }
        public DbSet<Companies_Audit> Companies_Audit { get; set; }
        public DbSet<Stores> Stores { get; set; }
        public DbSet<Stores_Audit> Stores_Audit { get; set; }
        public DbSet<Employees> Employees { get; set; }
        public DbSet<Employees_Audit> Employees_Audit { get; set; }


        public MahzanDbContext(DbContextOptions<MahzanDbContext> options) : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Audits>()
                        .HasKey(audits => new { audits.Id });

            modelBuilder.Entity<Members>()
                        .HasKey(members => new { members.Id });

            modelBuilder.Entity<Groups>()
                        .HasKey(Groups => new { Groups.Id });

            modelBuilder.Entity<Groups_Audit>()
                        .HasKey(groups_Audit => new { groups_Audit.Id });

            modelBuilder.Entity<Companies>()
                        .HasKey(companies => new { companies.Id });

            modelBuilder.Entity<Stores>()
                        .HasKey(stores => new { stores.Id });

            modelBuilder.Entity<Stores_Audit>()
                        .HasKey(stores_audit => new { stores_audit.Id });

            modelBuilder.Entity<Employees>()
                        .HasKey(employees => new { employees.Id });

            modelBuilder.Entity<Employees_Audit>()
                        .HasKey(employees_Audit => new { employees_Audit.Id });


        }

        public int SaveChanges(TableAuditEnum tableAuditEnum,
                               Guid aspNetUsersId)
        {
            var auditEntries = OnBeforeSaveChanges(tableAuditEnum,
                                                   aspNetUsersId);

            var result = base.SaveChanges();

            OnAfterSaveChanges(tableAuditEnum,
                               aspNetUsersId,
                               auditEntries);

            return result;

        }
        private List<AuditEntry> OnBeforeSaveChanges(TableAuditEnum tableAuditEnum,
                                                     Guid aspNetUsersId)
        {


            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Audits || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var auditEntry = new AuditEntry(entry);
                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            auditEntry.Tipo = EntityState.Added;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            auditEntry.Tipo = EntityState.Deleted;
                            break;

                        case EntityState.Modified:

                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }

                            auditEntry.Tipo = EntityState.Modified;
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                
                auditEntry.AspNetUserId = aspNetUsersId;

                switch (tableAuditEnum)
                {
                    case TableAuditEnum.GROUPS_AUDIT:
                        Groups_Audit.Add(auditEntry.ToGroups_Audit());
                        break;
                    case TableAuditEnum.COMPANIES_AUDIT:
                        Companies_Audit.Add(auditEntry.ToCompanies_Audit());
                        break;
                    case TableAuditEnum.STORES_AUDIT:
                        Stores_Audit.Add(auditEntry.ToStores_Audit());
                        break;
                    case TableAuditEnum.EMPLOYEES_AUDIT:
                        Employees_Audit.Add(auditEntry.ToEmployees_Audit());
                        break;
                    default:
                        Audits.Add(auditEntry.ToAudits());
                        break;
                }

            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }
        private Task OnAfterSaveChanges(TableAuditEnum tableAuditEnum,
                                        Guid aspNetUsersId,
                                        List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry\
                Audits.Add(auditEntry.ToAudits());

            }

            return SaveChangesAsync();
        }
    }
}
